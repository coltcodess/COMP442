[eq, ==, 1] [plus, +, 1] [or, or, 1] [openpar, (, 1] [semi, ;, 1] [int, int, 1] [while, while, 1] [local, local, 1] 
[noteq, <>, 2] [and, and, 2] [closepar, ), 2] [comma, ,, 2] [float, float, 2] [if, if, 2] [constructor, constructor, 2] 
[lt, <, 3] [multi, *, 3] [not, not, 3] [opencubr, {, 3] [dot, ., 3] [void, void, 3] [then, then, 3] [attribute, attribute, 3] 
[gt, >, 4] [div, /, 4] [closecubr, }, 4] [colon, :, 4] [class, class, 4] [else, else, 4] [function, function, 4] 
[leq, <=, 5] [assign, :=, 5] [opensqbr, [, 5] [arrow, =>, 5] [self, self, 5] [read, read, 5] [public, public, 5] 
[geq, >=, 6] [closesqbr, ], 6] [isa, isa, 6] [write, write, 6] [private, private, 6] 
[Implementation, implementation, 7] [return, return, 7] 
[intnum, 0, 13] 
[intnum, 1, 14] 
[intnum, 10, 15] 
[intnum, 12, 16] 
[intnum, 123, 17] 
[intnum, 12345, 18] 
[intnum, 1.23, 20] 
[intnum, 12.34, 21] 
[intnum, 120.34e10, 22] 
[intnum, 12345.6789e-123, 23] 
[id, abc, 25] 
[id, abc1, 26] 
[id, a1bc, 27] 
[id, abc_1abc, 28] 
[id, abc1_abc, 29] 
[inlinecmt, // this is an inline comment, 32] 
[blockcmt, /* this is a single line block comment */, 32] 
[blockcmt, /* this is a \nmultiple line\nblock comment \n*/, 36] 
[blockcmt, /* this is an imbricated \n/* block comment\n*/, 39] 
[multi, *, 39] 
[div, /, 39] 