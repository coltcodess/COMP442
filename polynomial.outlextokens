[inlinecmt, // ====== struct declarations ====== //, 1] [class, class, 1] [id, POLYNOMIAL, 1] [opencubr, {, 1] 
[public, public, 2] [function, function, 2] [id, evaluate, 2] [openpar, (, 2] [id, x, 2] [colon, :, 2] [float, float, 2] [closepar, ), 2] [arrow, =>, 2] [float, float, 2] [semi, ;, 2] 
[closecubr, }, 3] [semi, ;, 3] 
[class, class, 5] 
[id, LINEAR, 5] [isa, isa, 5] [id, POLYNOMIAL, 5] [comma, ,, 5] [id, SHAPE, 5] [opencubr, {, 5] 
[private, private, 6] [attribute, attribute, 6] [id, a, 6] [colon, :, 6] [float, float, 6] [semi, ;, 6] 
[private, private, 7] [attribute, attribute, 7] [id, b, 7] [colon, :, 7] [float, float, 7] [semi, ;, 7] 
[public, public, 8] [function, function, 8] [id, build, 8] [openpar, (, 8] [id, A, 8] [colon, :, 8] [float, float, 8] [comma, ,, 8] [id, B, 8] [colon, :, 8] [float, float, 8] [closepar, ), 8] [arrow, =>, 8] [id, LINEAR, 8] [semi, ;, 8] 
[public, public, 9] [function, function, 9] [id, evaluate, 9] [openpar, (, 9] [id, x, 9] [colon, :, 9] [float, float, 9] [closepar, ), 9] [arrow, =>, 9] [float, float, 9] [semi, ;, 9] 
[closecubr, }, 10] [semi, ;, 10] 
[class, class, 12] 
[id, QUADRATIC, 12] [isa, isa, 12] [id, POLYNOMIAL, 12] [opencubr, {, 12] 
[private, private, 13] [attribute, attribute, 13] [id, a, 13] [colon, :, 13] [float, float, 13] [opensqbr, [, 13] [intnum, 2, 13] [closesqbr, ], 13] [opensqbr, [, 13] [intnum, 2, 13] [closesqbr, ], 13] [semi, ;, 13] 
[private, private, 14] [attribute, attribute, 14] [id, b, 14] [colon, :, 14] [float, float, 14] [semi, ;, 14] 
[private, private, 15] [attribute, attribute, 15] [id, c, 15] [colon, :, 15] [float, float, 15] [semi, ;, 15] 
[public, public, 16] [function, function, 16] [id, build, 16] [openpar, (, 16] [id, A, 16] [colon, :, 16] [float, float, 16] [comma, ,, 16] [id, B, 16] [colon, :, 16] [float, float, 16] [comma, ,, 16] [id, C, 16] [colon, :, 16] [float, float, 16] [closepar, ), 16] [arrow, =>, 16] [id, QUADRATIC, 16] [semi, ;, 16] 
[public, public, 17] [function, function, 17] [id, evaluate, 17] [openpar, (, 17] [id, x, 17] [colon, :, 17] [float, float, 17] [closepar, ), 17] [arrow, =>, 17] [float, float, 17] [semi, ;, 17] 
[closecubr, }, 18] [semi, ;, 18] 
[inlinecmt, // ====== struct implementations ====== //, 20] 
[implementation, implementation, 20] [id, POLYNOMIAL, 20] [opencubr, {, 20] 
[function, function, 21] [id, evaluate, 21] [openpar, (, 21] [id, x, 21] [colon, :, 21] [float, float, 21] [closepar, ), 21] [arrow, =>, 21] [float, float, 21] 
[opencubr, {, 22] 
[local, local, 23] [id, result, 23] [colon, :, 23] [float, float, 23] [semi, ;, 23] 
[return, return, 24] [openpar, (, 24] [intnum, 0, 24] [closepar, ), 24] [semi, ;, 24] 
[closecubr, }, 25] 
[closecubr, }, 26] 
[implementation, implementation, 28] 
[id, QUADRATIC, 28] [opencubr, {, 28] 
[function, function, 29] [id, evaluate, 29] [openpar, (, 29] [id, x, 29] [colon, :, 29] [float, float, 29] [closepar, ), 29] [arrow, =>, 29] [float, float, 29] 
[opencubr, {, 30] 
[local, local, 31] [id, result, 31] [colon, :, 31] [float, float, 31] [semi, ;, 31] 
[inlinecmt, //Using Horner's method, 32] [id, result, 32] [assign, :=, 32] [id, a, 32] [semi, ;, 32] 
[id, result, 33] [assign, :=, 33] [id, result, 33] [multi, *, 33] [id, x, 33] [plus, +, 33] [id, b, 33] [semi, ;, 33] 
[id, result, 34] [assign, :=, 34] [id, result, 34] [multi, *, 34] [id, x, 34] [plus, +, 34] [id, c, 34] [semi, ;, 34] 
[return, return, 35] [openpar, (, 35] [id, result, 35] [closepar, ), 35] [semi, ;, 35] 
[closecubr, }, 36] 
[function, function, 37] [id, build, 37] [openpar, (, 37] [id, A, 37] [colon, :, 37] [float, float, 37] [comma, ,, 37] [id, B, 37] [colon, :, 37] [float, float, 37] [comma, ,, 37] [id, C, 37] [colon, :, 37] [float, float, 37] [closepar, ), 37] [arrow, =>, 37] [id, QUADRATIC, 37] 
[opencubr, {, 38] 
[local, local, 39] [id, new_function, 39] [colon, :, 39] [id, QUADRATIC, 39] [semi, ;, 39] 
[id, new_function, 40] [dot, ., 40] [id, a, 40] [assign, :=, 40] [id, A, 40] [semi, ;, 40] 
[id, new_function, 41] [dot, ., 41] [id, b, 41] [assign, :=, 41] [id, B, 41] [semi, ;, 41] 
[id, new_function, 42] [dot, ., 42] [id, c, 42] [assign, :=, 42] [id, C, 42] [semi, ;, 42] 
[return, return, 43] [openpar, (, 43] [id, new_function, 43] [closepar, ), 43] [semi, ;, 43] 
[closecubr, }, 44] 
[closecubr, }, 45] 
[implementation, implementation, 47] 
[id, LINEAR, 47] [opencubr, {, 47] 
[function, function, 48] [id, build, 48] [openpar, (, 48] [id, A, 48] [colon, :, 48] [float, float, 48] [comma, ,, 48] [id, B, 48] [colon, :, 48] [float, float, 48] [closepar, ), 48] [arrow, =>, 48] [id, LINEAR, 48] 
[opencubr, {, 49] 
[local, local, 50] [id, new_function, 50] [colon, :, 50] [id, LINEAR, 50] [semi, ;, 50] 
[id, new_function, 51] [dot, ., 51] [id, a, 51] [assign, :=, 51] [id, A, 51] [semi, ;, 51] 
[id, new_function, 52] [dot, ., 52] [id, b, 52] [assign, :=, 52] [id, B, 52] [semi, ;, 52] 
[return, return, 53] [openpar, (, 53] [id, new_function, 53] [closepar, ), 53] [semi, ;, 53] 
[closecubr, }, 54] 
[function, function, 55] [id, evaluate, 55] [openpar, (, 55] [id, x, 55] [colon, :, 55] [float, float, 55] [closepar, ), 55] [arrow, =>, 55] [float, float, 55] 
[opencubr, {, 56] 
[local, local, 57] [id, result, 57] [colon, :, 57] [float, float, 57] [semi, ;, 57] 
[id, result, 58] [assign, :=, 58] [floatnum, 0.0, 58] [semi, ;, 58] 
[id, result, 59] [assign, :=, 59] [id, a, 59] [multi, *, 59] [id, x, 59] [plus, +, 59] [id, b, 59] [semi, ;, 59] 
[return, return, 60] [openpar, (, 60] [id, result, 60] [closepar, ), 60] [semi, ;, 60] 
[closecubr, }, 61] 
[closecubr, }, 62] 
[inlinecmt, // ====== main ====== //, 64] 
[function, function, 64] [id, main, 64] [openpar, (, 64] [closepar, ), 64] [arrow, =>, 64] [void, void, 64] 
[opencubr, {, 65] 
[local, local, 66] [id, f1, 66] [colon, :, 66] [id, LINEAR, 66] [semi, ;, 66] 
[local, local, 67] [id, f2, 67] [colon, :, 67] [id, QUADRATIC, 67] [semi, ;, 67] 
[local, local, 68] [id, counter, 68] [colon, :, 68] [int, int, 68] [semi, ;, 68] 
[id, f1, 69] [assign, :=, 69] [id, f1, 69] [dot, ., 69] [id, build, 69] [openpar, (, 69] [intnum, 2, 69] [comma, ,, 69] [floatnum, 3.5, 69] [closepar, ), 69] [semi, ;, 69] 
[id, f2, 70] [assign, :=, 70] [id, f2, 70] [dot, ., 70] [id, build, 70] [openpar, (, 70] [minus, -, 70] [floatnum, 2.0, 70] [comma, ,, 70] [floatnum, 1.0, 70] [comma, ,, 70] [floatnum, 0.0, 70] [closepar, ), 70] [semi, ;, 70] 
[id, counter, 71] [assign, :=, 71] [intnum, 1, 71] [semi, ;, 71] 
[id, f1, 73] 
[dot, ., 73] [id, build, 73] [openpar, (, 73] [id, d, 73] [closepar, ), 73] [semi, ;, 73] 
[while, while, 75] 
[openpar, (, 75] [id, counter, 75] [leq, <=, 75] [intnum, 10, 75] [closepar, ), 75] 
[opencubr, {, 76] 
[write, write, 77] [openpar, (, 77] [id, counter, 77] [closepar, ), 77] [semi, ;, 77] 
[write, write, 78] [openpar, (, 78] [id, f1, 78] [dot, ., 78] [id, evaluate, 78] [openpar, (, 78] [id, counter, 78] [closepar, ), 78] [closepar, ), 78] [semi, ;, 78] 
[write, write, 79] [openpar, (, 79] [id, f2, 79] [dot, ., 79] [id, evaluate, 79] [openpar, (, 79] [id, counter, 79] [closepar, ), 79] [closepar, ), 79] [semi, ;, 79] 
[closecubr, }, 80] [semi, ;, 80] 
[closecubr, }, 81] 
[blockcmt, /*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 82] 
[end_of_file, $, 211] 