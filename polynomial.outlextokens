[inlinecmt, // ====== struct declarations ====== //, 1] [class, class, 1] [id, POLYNOMIAL, 1] [opencubr, {, 1] 
[public, public, 2] [function, function, 2] [id, evaluate, 2] [openpar, (, 2] [id, x, 2] [colon, :, 2] [float, float, 2] [closepar, ), 2] [arrow, =>, 2] [float, float, 2] [semi, ;, 2] 
[closecubr, }, 3] [semi, ;, 3] 
[class, class, 5] 
[id, POLYNOMIAL, 5] [opencubr, {, 5] 
[public, public, 6] [function, function, 6] [id, evaluate, 6] [openpar, (, 6] [id, x, 6] [colon, :, 6] [float, float, 6] [closepar, ), 6] [arrow, =>, 6] [float, float, 6] [semi, ;, 6] 
[closecubr, }, 7] [semi, ;, 7] 
[class, class, 9] 
[id, LINEAR, 9] [isa, isa, 9] [id, POLYNOMIAL, 9] [comma, ,, 9] [id, SHAPE, 9] [opencubr, {, 9] 
[private, private, 10] [attribute, attribute, 10] [id, a, 10] [colon, :, 10] [float, float, 10] [semi, ;, 10] 
[private, private, 11] [attribute, attribute, 11] [id, b, 11] [colon, :, 11] [float, float, 11] [semi, ;, 11] 
[public, public, 12] [function, function, 12] [id, build, 12] [openpar, (, 12] [id, A, 12] [colon, :, 12] [float, float, 12] [comma, ,, 12] [id, B, 12] [colon, :, 12] [float, float, 12] [closepar, ), 12] [arrow, =>, 12] [id, LINEAR, 12] [semi, ;, 12] 
[public, public, 13] [function, function, 13] [id, evaluate, 13] [openpar, (, 13] [id, x, 13] [colon, :, 13] [float, float, 13] [closepar, ), 13] [arrow, =>, 13] [float, float, 13] [semi, ;, 13] 
[closecubr, }, 14] [semi, ;, 14] 
[class, class, 16] 
[id, QUADRATIC, 16] [isa, isa, 16] [id, POLYNOMIAL, 16] [opencubr, {, 16] 
[private, private, 17] [attribute, attribute, 17] [id, a, 17] [colon, :, 17] [float, float, 17] [opensqbr, [, 17] [intnum, 2, 17] [closesqbr, ], 17] [opensqbr, [, 17] [intnum, 2, 17] [closesqbr, ], 17] [semi, ;, 17] 
[private, private, 18] [attribute, attribute, 18] [id, b, 18] [colon, :, 18] [float, float, 18] [semi, ;, 18] 
[private, private, 19] [attribute, attribute, 19] [id, c, 19] [colon, :, 19] [float, float, 19] [semi, ;, 19] 
[public, public, 20] [function, function, 20] [id, build, 20] [openpar, (, 20] [id, A, 20] [colon, :, 20] [float, float, 20] [comma, ,, 20] [id, B, 20] [colon, :, 20] [float, float, 20] [comma, ,, 20] [id, C, 20] [colon, :, 20] [float, float, 20] [closepar, ), 20] [arrow, =>, 20] [id, QUADRATIC, 20] [semi, ;, 20] 
[public, public, 21] [function, function, 21] [id, evaluate, 21] [openpar, (, 21] [id, x, 21] [colon, :, 21] [float, float, 21] [closepar, ), 21] [arrow, =>, 21] [float, float, 21] [semi, ;, 21] 
[closecubr, }, 22] [semi, ;, 22] 
[inlinecmt, // ====== struct implementations ====== //, 24] 
[implementation, implementation, 25] 
[id, QUADRATIC, 25] [opencubr, {, 25] 
[function, function, 26] [id, evaluate, 26] [openpar, (, 26] [id, x, 26] [colon, :, 26] [float, float, 26] [closepar, ), 26] [arrow, =>, 26] [float, float, 26] 
[opencubr, {, 27] 
[local, local, 28] [id, result, 28] [colon, :, 28] [float, float, 28] [semi, ;, 28] 
[inlinecmt, //Using Horner's method, 29] [id, result, 29] [assign, :=, 29] [id, a, 29] [semi, ;, 29] 
[id, result, 30] [assign, :=, 30] [id, result, 30] [multi, *, 30] [id, x, 30] [plus, +, 30] [id, b, 30] [semi, ;, 30] 
[id, result, 31] [assign, :=, 31] [id, result, 31] [multi, *, 31] [id, x, 31] [plus, +, 31] [id, c, 31] [semi, ;, 31] 
[return, return, 32] [openpar, (, 32] [id, result, 32] [closepar, ), 32] [semi, ;, 32] 
[closecubr, }, 33] 
[function, function, 34] [id, build, 34] [openpar, (, 34] [id, A, 34] [colon, :, 34] [float, float, 34] [comma, ,, 34] [id, B, 34] [colon, :, 34] [float, float, 34] [comma, ,, 34] [id, C, 34] [colon, :, 34] [float, float, 34] [closepar, ), 34] [arrow, =>, 34] [id, QUADRATIC, 34] 
[opencubr, {, 35] 
[local, local, 36] [id, new_function, 36] [colon, :, 36] [id, QUADRATIC, 36] [semi, ;, 36] 
[id, new_function, 37] [dot, ., 37] [id, a, 37] [assign, :=, 37] [id, A, 37] [semi, ;, 37] 
[id, new_function, 38] [dot, ., 38] [id, b, 38] [assign, :=, 38] [id, B, 38] [semi, ;, 38] 
[id, new_function, 39] [dot, ., 39] [id, c, 39] [assign, :=, 39] [id, C, 39] [semi, ;, 39] 
[return, return, 40] [openpar, (, 40] [id, new_function, 40] [closepar, ), 40] [semi, ;, 40] 
[closecubr, }, 41] 
[closecubr, }, 42] 
[implementation, implementation, 44] 
[id, LINEAR, 44] [opencubr, {, 44] 
[function, function, 45] [id, build, 45] [openpar, (, 45] [id, A, 45] [colon, :, 45] [float, float, 45] [comma, ,, 45] [id, B, 45] [colon, :, 45] [float, float, 45] [closepar, ), 45] [arrow, =>, 45] [id, LINEAR, 45] 
[opencubr, {, 46] 
[local, local, 47] [id, new_function, 47] [colon, :, 47] [id, LINEAR, 47] [semi, ;, 47] 
[id, new_function, 48] [dot, ., 48] [id, a, 48] [assign, :=, 48] [id, A, 48] [semi, ;, 48] 
[id, new_function, 49] [dot, ., 49] [id, b, 49] [assign, :=, 49] [id, B, 49] [semi, ;, 49] 
[return, return, 50] [openpar, (, 50] [id, new_function, 50] [closepar, ), 50] [semi, ;, 50] 
[closecubr, }, 51] 
[function, function, 52] [id, evaluate, 52] [openpar, (, 52] [id, x, 52] [colon, :, 52] [float, float, 52] [closepar, ), 52] [arrow, =>, 52] [float, float, 52] 
[opencubr, {, 53] 
[local, local, 54] [id, result, 54] [colon, :, 54] [float, float, 54] [semi, ;, 54] 
[id, result, 55] [assign, :=, 55] [floatnum, 0.0, 55] [semi, ;, 55] 
[id, result, 56] [assign, :=, 56] [id, a, 56] [multi, *, 56] [id, x, 56] [plus, +, 56] [id, b, 56] [semi, ;, 56] 
[return, return, 57] [openpar, (, 57] [id, result, 57] [closepar, ), 57] [semi, ;, 57] 
[closecubr, }, 58] 
[closecubr, }, 59] 
[inlinecmt, // ====== main ====== //, 61] 
[function, function, 61] [id, main, 61] [openpar, (, 61] [closepar, ), 61] [arrow, =>, 61] [void, void, 61] 
[opencubr, {, 62] 
[local, local, 63] [id, f1, 63] [colon, :, 63] [id, LINEAR, 63] [semi, ;, 63] 
[local, local, 64] [id, f2, 64] [colon, :, 64] [id, QUADRATIC, 64] [semi, ;, 64] 
[local, local, 65] [id, counter, 65] [colon, :, 65] [int, int, 65] [semi, ;, 65] 
[id, f1, 66] [assign, :=, 66] [id, f1, 66] [dot, ., 66] [id, build, 66] [openpar, (, 66] [intnum, 2, 66] [comma, ,, 66] [floatnum, 3.5, 66] [closepar, ), 66] [semi, ;, 66] 
[id, f2, 67] [assign, :=, 67] [id, f2, 67] [dot, ., 67] [id, build, 67] [openpar, (, 67] [minus, -, 67] [floatnum, 2.0, 67] [comma, ,, 67] [floatnum, 1.0, 67] [comma, ,, 67] [floatnum, 0.0, 67] [closepar, ), 67] [semi, ;, 67] 
[id, counter, 68] [assign, :=, 68] [intnum, 1, 68] [semi, ;, 68] 
[id, f1, 70] 
[dot, ., 70] [id, build, 70] [openpar, (, 70] [id, d, 70] [closepar, ), 70] [semi, ;, 70] 
[while, while, 72] 
[openpar, (, 72] [id, counter, 72] [leq, <=, 72] [intnum, 10, 72] [closepar, ), 72] 
[opencubr, {, 73] 
[write, write, 74] [openpar, (, 74] [id, counter, 74] [closepar, ), 74] [semi, ;, 74] 
[write, write, 75] [openpar, (, 75] [id, f1, 75] [dot, ., 75] [id, evaluate, 75] [openpar, (, 75] [id, counter, 75] [closepar, ), 75] [closepar, ), 75] [semi, ;, 75] 
[write, write, 76] [openpar, (, 76] [id, f2, 76] [dot, ., 76] [id, evaluate, 76] [openpar, (, 76] [id, counter, 76] [closepar, ), 76] [closepar, ), 76] [semi, ;, 76] 
[closecubr, }, 77] [semi, ;, 77] 
[closecubr, }, 78] 
[blockcmt, /*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 79] 
[end_of_file, $, 208] 