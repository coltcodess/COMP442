[blockcmt, /* sort the array */, 1] 
[function, function, 2] [id, bubbleSort, 2] [openpar, (, 2] [id, arr, 2] [colon, :, 2] [int, int, 2] [opensqbr, [, 2] [closesqbr, ], 2] [comma, ,, 2] [id, size, 2] [colon, :, 2] [int, int, 2] [closepar, ), 2] [arrow, =>, 2] [void, void, 2] 
[opencubr, {, 3] 
[local, local, 4] [id, n, 4] [colon, :, 4] [int, int, 4] [semi, ;, 4] 
[local, local, 5] [id, i, 5] [colon, :, 5] [int, int, 5] [semi, ;, 5] 
[local, local, 6] [id, j, 6] [colon, :, 6] [int, int, 6] [semi, ;, 6] 
[local, local, 7] [id, temp, 7] [colon, :, 7] [int, int, 7] [semi, ;, 7] 
[id, n, 8] [assign, :=, 8] [id, size, 8] [semi, ;, 8] 
[id, i, 9] [assign, :=, 9] [intnum, 0, 9] [semi, ;, 9] 
[id, j, 10] [assign, :=, 10] [intnum, 0, 10] [semi, ;, 10] 
[id, temp, 11] [assign, :=, 11] [intnum, 0, 11] [semi, ;, 11] 
[while, while, 12] [openpar, (, 12] [id, i, 12] [lt, <, 12] [id, n, 12] [minus, -, 12] [intnum, 1, 12] [closepar, ), 12] [opencubr, {, 12] 
[while, while, 13] [openpar, (, 13] [id, j, 13] [lt, <, 13] [id, n, 13] [minus, -, 13] [id, i, 13] [minus, -, 13] [intnum, 1, 13] [closepar, ), 13] [opencubr, {, 13] 
[if, if, 14] [openpar, (, 14] [id, arr, 14] [opensqbr, [, 14] [id, j, 14] [closesqbr, ], 14] [gt, >, 14] [id, arr, 14] [opensqbr, [, 14] [id, j, 14] [plus, +, 14] [intnum, 1, 14] [closesqbr, ], 14] [closepar, ), 14] 
[then, then, 15] [opencubr, {, 15] 
[inlinecmt, // swap temp and arr[i], 16] [id, temp, 16] [assign, :=, 16] [id, arr, 16] [opensqbr, [, 16] [id, j, 16] [closesqbr, ], 16] [semi, ;, 16] 
[id, arr, 17] [opensqbr, [, 17] [id, j, 17] [closesqbr, ], 17] [assign, :=, 17] [id, arr, 17] [opensqbr, [, 17] [id, j, 17] [plus, +, 17] [intnum, 1, 17] [closesqbr, ], 17] [semi, ;, 17] 
[id, arr, 18] [opensqbr, [, 18] [id, j, 18] [plus, +, 18] [intnum, 1, 18] [closesqbr, ], 18] [assign, :=, 18] [id, temp, 18] [semi, ;, 18] 
[closecubr, }, 19] [else, else, 19] [semi, ;, 19] 
[id, j, 20] [assign, :=, 20] [id, j, 20] [plus, +, 20] [intnum, 1, 20] [semi, ;, 20] 
[closecubr, }, 21] [semi, ;, 21] 
[id, i, 22] [assign, :=, 22] [id, i, 22] [plus, +, 22] [intnum, 1, 22] [semi, ;, 22] 
[closecubr, }, 23] [semi, ;, 23] 
[closecubr, }, 24] 
[blockcmt, /* print the array */, 26] 
[function, function, 27] 
[id, printArray, 27] [openpar, (, 27] [id, arr, 27] [colon, :, 27] [int, int, 27] [opensqbr, [, 27] [closesqbr, ], 27] [comma, ,, 27] [id, size, 27] [colon, :, 27] [int, int, 27] [closepar, ), 27] [arrow, =>, 27] [void, void, 27] 
[opencubr, {, 28] 
[local, local, 29] [id, n, 29] [colon, :, 29] [int, int, 29] [semi, ;, 29] 
[local, local, 30] [id, i, 30] [colon, :, 30] [int, int, 30] [semi, ;, 30] 
[id, n, 31] [assign, :=, 31] [id, size, 31] [semi, ;, 31] 
[id, i, 32] [assign, :=, 32] [intnum, 0, 32] [semi, ;, 32] 
[while, while, 33] [openpar, (, 33] [id, i, 33] [lt, <, 33] [id, n, 33] [closepar, ), 33] [opencubr, {, 33] 
[write, write, 34] [openpar, (, 34] [id, arr, 34] [opensqbr, [, 34] [id, i, 34] [closesqbr, ], 34] [closepar, ), 34] [semi, ;, 34] 
[id, i, 35] [assign, :=, 35] [id, i, 35] [plus, +, 35] [intnum, 1, 35] [semi, ;, 35] 
[closecubr, }, 36] [semi, ;, 36] 
[closecubr, }, 37] 
[inlinecmt, // main funtion to test above, 39] 
[function, function, 39] [id, main, 39] [openpar, (, 39] [closepar, ), 39] [arrow, =>, 39] [void, void, 39] 
[opencubr, {, 40] 
[local, local, 41] [id, arr, 41] [colon, :, 41] [int, int, 41] [opensqbr, [, 41] [intnum, 7, 41] [closesqbr, ], 41] [semi, ;, 41] 
[id, arr, 42] [opensqbr, [, 42] [intnum, 0, 42] [closesqbr, ], 42] [assign, :=, 42] [intnum, 64, 42] [semi, ;, 42] 
[id, arr, 43] [opensqbr, [, 43] [intnum, 1, 43] [closesqbr, ], 43] [assign, :=, 43] [intnum, 34, 43] [semi, ;, 43] 
[id, arr, 44] [opensqbr, [, 44] [intnum, 2, 44] [closesqbr, ], 44] [assign, :=, 44] [intnum, 25, 44] [semi, ;, 44] 
[id, arr, 45] [opensqbr, [, 45] [intnum, 3, 45] [closesqbr, ], 45] [assign, :=, 45] [intnum, 12, 45] [semi, ;, 45] 
[id, arr, 46] [opensqbr, [, 46] [intnum, 4, 46] [closesqbr, ], 46] [assign, :=, 46] [intnum, 22, 46] [semi, ;, 46] 
[id, arr, 47] [opensqbr, [, 47] [intnum, 5, 47] [closesqbr, ], 47] [assign, :=, 47] [intnum, 11, 47] [semi, ;, 47] 
[id, arr, 48] [opensqbr, [, 48] [intnum, 6, 48] [closesqbr, ], 48] [assign, :=, 48] [intnum, 90, 48] [semi, ;, 48] 
[id, printarray, 49] [openpar, (, 49] [id, arr, 49] [comma, ,, 49] [intnum, 7, 49] [closepar, ), 49] [semi, ;, 49] 
[id, bubbleSort, 50] [openpar, (, 50] [id, arr, 50] [comma, ,, 50] [intnum, 7, 50] [closepar, ), 50] [semi, ;, 50] 
[id, printarray, 51] [openpar, (, 51] [id, arr, 51] [comma, ,, 51] [intnum, 7, 51] [closepar, ), 51] [semi, ;, 51] 
[closecubr, }, 52] 
[blockcmt, /*\n    classes\n    --------------------------------------\n|X| no class declaration\n| | class declaration\n| | multiple class declarations\n| | no data member declaration\n| | data member declaration\n| | multiple data member declaration\n| | no member function declaration\n| | member function declaration\n| | multiple member function declaration\n| | no member\n| | no inherited class\n| | one inherited class\n| | multiple inherited classes\n| | private member specifier\n| | public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n| | member function definition\n| | multiple member function definitions\n|X| return type: void\n| | return type: integer\n| | return type: float\n| | return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n| | member function call\n| | parameters:0\n| | parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n| | function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: string\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n| | if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n| | id.id\n| | id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n| | involving multop\n|X| involving relop\n| | involving addop + multop\n|X| involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parentheses\n| | involving not\n| | involving sign\n|X| involving literals\n| | involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 54] 
[end_of_file, $, 183] 